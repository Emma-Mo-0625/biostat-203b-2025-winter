---
title: "Biostat 203B Homework 4"
subtitle: "Due Mar 9 @ 11:59PM"
author: "Emma Mo 906542365"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
runtime: shiny
---

Display machine information:
```{r}
sessionInfo()
```
Display my machine memory.
```{r}
memuse::Sys.meminfo()
```

Load database libraries and the tidyverse frontend:
```{r}
library(bigrquery)
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
library(dplyr)
```

## Q1. Compile the ICU cohort in HW3 from the Google BigQuery database 

Below is an outline of steps. In this homework, we exclusively work with the BigQuery database and should not use any MIMIC data files stored on our local computer. Transform data as much as possible in BigQuery database and `collect()` the tibble **only at the end of Q1.7**.

### Q1.1 Connect to BigQuery

Authenticate with BigQuery using the service account token. Please place the service account token (shared via BruinLearn) in the working directory (same folder as your qmd file). Do **not** ever add this token to your Git repository. If you do so, you will lose 50 points.
```{r}
# path to the service account token 
satoken <- "biostat-203b-2025-winter-4e58ec6e5579.json"
# BigQuery authentication using service account
bq_auth(path = satoken)
```
Connect to BigQuery database `mimiciv_3_1` in GCP (Google Cloud Platform), using the project billing account `biostat-203b-2025-winter`.
```{r}
# connect to the BigQuery database `biostat-203b-2025-mimiciv_3_1`
con_bq <- dbConnect(
    bigrquery::bigquery(),
    project = "biostat-203b-2025-winter",
    dataset = "mimiciv_3_1",
    billing = "biostat-203b-2025-winter"
)
con_bq
```
List all tables in the `mimiciv_3_1` database.
```{r}
dbListTables(con_bq)
```

### Q1.2 `icustays` data

Connect to the `icustays` table.
```{r}
# full ICU stays table
icustays_tble <- tbl(con_bq, "icustays") |>
  arrange(subject_id, hadm_id, stay_id) |>
  show_query() |>
  print(width = Inf)
```

### Q1.3 `admissions` data

Connect to the `admissions` table.
```{r}
# # TODO
admissions_tble <- tbl(con_bq, "admissions") |>
  arrange(subject_id, hadm_id) |>
  show_query() |>
  print(width = Inf)
```

### Q1.4 `patients` data

Connect to the `patients` table.
```{r}
# # TODO
patients_tble <- tbl(con_bq, "patients") |>
  arrange(subject_id) |>
  show_query() |>
  print(width = Inf)
```

### Q1.5 `labevents` data

Connect to the `labevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the lab items listed in HW3. Only keep the last lab measurements (by `storetime`) before the ICU stay and pivot lab items to become variables/columns. Write all steps in _one_ chain of pipes.

```{r}
# TODO
itemid_label_lab <- c(
  "50912" = "creatinine",
  "50971" = "potassium",
  "50983" = "sodium",
  "50902" = "chloride",
  "50882" = "bicarbonate",
  "51221" = "hematocrit",
  "51301" = "wbc",
  "50931" = "glucose"
)
```


```{r}
labevents_tble <- tbl(con_bq, "labevents") |>
  select(subject_id, itemid, storetime, valuenum) |>
  filter(
    itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) |>
  left_join(
    select(icustays_tble, subject_id, stay_id, intime),
    by = c("subject_id"),
  ) |>
  filter(storetime < intime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_max(storetime) |>
  select(-storetime, -intime) |>
  ungroup() |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  rename_at(
    vars(names(itemid_label_lab)),
    ~ itemid_label_lab[.]
    ) |>
  # show_query() |>
  arrange(subject_id, stay_id) |>
  # relocate(subject_id, stay_id, sort(names(.))) |>
  print()
```

### Q1.6 `chartevents` data

Connect to `chartevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the chart events listed in HW3. Only keep the first chart events (by `storetime`) during ICU stay and pivot chart events to become variables/columns. Write all steps in _one_ chain of pipes. Similary to HW3, if a vital has multiple measurements at the first `storetime`, average them.

```{r}
# TODO
itemid_label_chart <- c(
  "220045" = "heart_rate",
  "220179" = "non_invasive_blood_pressure_systolic",
  "220180" = "non_invasive_blood_pressure_diastolic",
  "223761" = "temperature_fahrenheit",
  "220210" = "respiratory_rate"
)
```


```{r}
chartevents_tble <- tbl(con_bq, "chartevents") |>
  select(subject_id, storetime, valuenum, itemid) |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>
  left_join(
    select(icustays_tble, subject_id, stay_id, intime, outtime),
    by = "subject_id",
    ) |>
  filter(storetime >= intime, storetime <= outtime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_min(storetime) |>
  summarise(valuenum = mean(as.numeric(valuenum), na.rm = TRUE), 
            .groups = "drop") |>
  ungroup() |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  rename_at(
    vars(names(itemid_label_chart)),
    ~ itemid_label_chart[.]
  ) |>
  # show_query() |>
  arrange(subject_id, stay_id) |>
  # relocate(subject_id, stay_id, sort(names(.))) |>
  print()
```

### Q1.7 Put things together

This step is similar to Q7 of HW3. Using _one_ chain of pipes `|>` to perform following data wrangling steps: (i) start with the `icustays_tble`, (ii) merge in admissions and patients tables, (iii) keep adults only (age at ICU intime >= 18), (iv) merge in the labevents and chartevents tables, (v) `collect` the tibble, (vi) sort `subject_id`, `hadm_id`, `stay_id` and `print(width = Inf)`.

```{r}
# TODO
mimic_icu_cohort <- icustays_tble |>
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |>
  left_join(patients_tble, by = "subject_id") |>
  mutate(age_intime = anchor_age + (year(intime) - anchor_year)) |>
  filter(age_intime >= 18) |>
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  
  collect() |>
  arrange(subject_id, hadm_id, stay_id) |>
  print(width = Inf)
```

### Q1.8 Preprocessing

Perform the following preprocessing steps. (i) Lump infrequent levels into "Other" level for `first_careunit`, `last_careunit`, `admission_type`, `admission_location`, and `discharge_location`. (ii) Collapse the levels of `race` into `ASIAN`, `BLACK`, `HISPANIC`, `WHITE`, and `Other`. (iii) Create a new variable `los_long` that is `TRUE` when `los` is greater than or equal to 2 days. (iv) Summarize the data using `tbl_summary()`, stratified by `los_long`. Hint: `fct_lump_n` and `fct_collapse` from the `forcats` package are useful.

Hint: Below is a numerical summary of my tibble after preprocessing:

<iframe width=95% height="500" src="./mimic_icu_cohort_gtsummary.html"></iframe>

```{r}
library(forcats)

mimic_icu_cohort <- mimic_icu_cohort |>
  mutate(
    first_careunit = fct_lump_n(factor(first_careunit), n = 4, other_level = "Other"),
    last_careunit = fct_lump_n(factor(last_careunit), n = 4, other_level = "Other"),
    admission_type = fct_lump_n(factor(admission_type), n = 4, other_level = "Other"),
    admission_location = fct_lump_n(factor(admission_location), n = 3, other_level = "Other"),
    discharge_location = fct_lump_n(factor(discharge_location), n = 4, other_level = "Other"),
    
    race = fct_collapse(
      race,
      ASIAN = c("ASIAN", "ASIAN - ASIAN INDIAN", "ASIAN - CHINESE", "ASIAN - KOREAN", "ASIAN - SOUTH EAST ASIAN"),
      BLACK = c("BLACK/AFRICAN", "BLACK/AFRICAN AMERICAN", "BLACK/CAPE VERDEAN", "BLACK/CARIBBEAN ISLAND"),
      HISPANIC = c("HISPANIC OR LATINO", "HISPANIC/LATINO - CENTRAL AMERICAN", "HISPANIC/LATINO - COLUMBIAN",
                   "HISPANIC/LATINO - CUBAN", "HISPANIC/LATINO - DOMINICAN", "HISPANIC/LATINO - GUATEMALAN", 
                   "HISPANIC/LATINO - HONDURAN", "HISPANIC/LATINO - MEXICAN", "HISPANIC/LATINO - PUERTO RICAN",
                   "HISPANIC/LATINO - SALVADORAN"),
      WHITE = c("WHITE", "WHITE - BRAZILIAN", "WHITE - EASTERN EUROPEAN", "WHITE - OTHER EUROPEAN", "WHITE - RUSSIAN"),
      Other = c("AMERICAN INDIAN/ALASKA NATIVE", "MULTIPLE RACE/ETHNICITY", "NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER",
                "OTHER", "PATIENT DECLINED TO ANSWER", "PORTUGUESE", "SOUTH AMERICAN", "UNABLE TO OBTAIN", "UNKNOWN")
      ),
    
    los_long = los >= 2
  )
    
```

```{r}
mimic_icu_cohort |>
  tbl_summary(by = los_long)
```


### Q1.9 Save the final tibble

Save the final tibble to an R data file `mimic_icu_cohort.rds` in the `mimiciv_shiny` folder.
```{r}
#| eval: false
# make a directory mimiciv_shiny
if (!dir.exists("mimiciv_shiny")) {
  dir.create("mimiciv_shiny")
}
# save the final tibble
mimic_icu_cohort |>
  write_rds("mimiciv_shiny/mimic_icu_cohort.rds", compress = "gz")
```
Close database connection and clear workspace.
```{r}
#| eval: false
if (exists("con_bq")) {
  dbDisconnect(con_bq)
}
rm(list = ls())
```
Although it is not a good practice to add big data files to Git, for grading purpose, please add `mimic_icu_cohort.rds` to your Git repository.

## Q2. Shiny app

Develop a Shiny app for exploring the ICU cohort data created in Q1. The app should reside in the `mimiciv_shiny` folder. The app should contain at least two tabs. One tab provides easy access to the graphical and numerical summaries of variables (demographics, lab measurements, vitals) in the ICU cohort, using the `mimic_icu_cohort.rds` you curated in Q1. The other tab allows user to choose a specific patient in the cohort and display the patient's ADT and ICU stay information as we did in Q1 of HW3, by dynamically retrieving the patient's ADT and ICU stay information from BigQuery database. Again, do **not** ever add the BigQuery token to your Git repository. If you do so, you will lose 50 points.

```{r}
library(shiny)
library(dplyr)
library(ggplot2)
library(DT)
library(bigrquery)
library(stringr)
library(lubridate)

# LOAD THE ICU COHORT DATA (for Summary tab)
cohort_data <- readRDS("mimiciv_shiny/mimic_icu_cohort.rds")

# Define variable groups for the Summary tab
demo_vars  <- c("age_intime", "gender", "insurance", "marital_status", "race")
lab_vars   <- c("bicarbonate", "creatinine", "potassium", "sodium", 
                "chloride", "hematocrit", "wbc", "glucose")
vital_vars <- c("heart_rate", "respiratory_rate", 
                "non_invasive_blood_pressure_systolic",
                "temperature_fahrenheit",
                "non_invasive_blood_pressure_diastolic")

var_groups <- list(
  "demo"        = demo_vars,
  "lab_measure" = lab_vars,
  "vitals"      = vital_vars
)

# BIGQUERY AUTHENTICATION & CONNECTION
satoken <- "biostat-203b-2025-winter-4e58ec6e5579.json"
bq_auth(path = satoken)
con_bq <- dbConnect(
  bigrquery::bigquery(),
  project  = "biostat-203b-2025-winter",
  dataset  = "mimiciv_3_1",
  billing  = "biostat-203b-2025-winter"
)
```


```{r}
# USER INTERFACE
ui <- fluidPage(
  titlePanel("ICU Cohort Data"),
  
  tabsetPanel(
    # TAB: SUMMARY
    tabPanel(
      "Summary",
      sidebarLayout(
        sidebarPanel(
          selectInput(
            inputId  = "var_group",
            label    = "Variable Group",
            choices  = names(var_groups),
            selected = "demo"
          ),
          selectInput(
            inputId = "var_choice",
            label   = "Variable",
            choices = NULL  # populated in server
          ),
          uiOutput("xlim_ui")  # slider if numeric
        ),
        mainPanel(
          plotOutput("var_plot"),
          tableOutput("var_summary")
        )
      )
    ),
    
    # TAB: PATIENT INFO
    tabPanel(
      "Patient Info",
      sidebarLayout(
        sidebarPanel(
          numericInput("subject_id", "Subject ID:", value = 100001, min = 1),
          actionButton("go_btn", "Submit"),
          selectInput("plot_type", "Select a plot:", choices = c("ADT", "ICU"))
        ),
        mainPanel(
          plotOutput("patient_plot"),
          DTOutput("patient_table")
        )
      )
    )
  )
)
```

```{r}
# SERVER LOGIC
server <- function(input, output, session) {
  
  ## SUMMARY TAB
  
  # Observe variable group -> update variable choices
  observeEvent(input$var_group, {
    vars_for_group <- var_groups[[input$var_group]]
    # If the group is valid, populate the second dropdown
    if (!is.null(vars_for_group) && length(vars_for_group) > 0) {
      updateSelectInput(
        session, "var_choice",
        choices  = vars_for_group,
        selected = vars_for_group[1]
      )
    } else {
      # If no valid vars, clear the dropdown
      updateSelectInput(
        session, "var_choice",
        choices  = character(0)
      )
    }
  }, ignoreNULL = FALSE)
  
  # Conditionally show a slider if the chosen variable is numeric
  output$xlim_ui <- renderUI({
    req(input$var_choice)
    var_data <- cohort_data[[input$var_choice]]
    if (is.numeric(var_data)) {
      sliderInput(
        "xlim",
        label = "X-axis limit",
        min   = floor(min(var_data, na.rm = TRUE)),
        max   = ceiling(max(var_data, na.rm = TRUE)),
        value = c(
          floor(min(var_data, na.rm = TRUE)),
          ceiling(max(var_data, na.rm = TRUE))
        )
      )
    } else {
      # No slider for categorical variables
      return(NULL)
    }
  })
  
  # Plot the chosen variable
  output$var_plot <- renderPlot({
    req(input$var_choice)
    var_data <- cohort_data[[input$var_choice]]
    
    if (is.numeric(var_data)) {
      # Numeric -> histogram
      xlims <- if (!is.null(input$xlim)) {
        input$xlim
      } else {
        range(var_data, na.rm = TRUE)
      }
      ggplot(cohort_data, aes(x = .data[[input$var_choice]])) +
        geom_histogram(binwidth = (xlims[2] - xlims[1]) / 30,
                       fill = "steelblue", color = "white") +
        coord_cartesian(xlim = xlims) +
        labs(x = input$var_choice, y = "Count",
             title = paste("Distribution of", input$var_choice)) +
        theme_minimal()
    } else {
      # Categorical -> bar chart
      ggplot(cohort_data, aes(x = .data[[input$var_choice]])) +
        geom_bar(fill = "tomato") +
        theme_minimal() +
        labs(x = input$var_choice, y = "Count",
             title = paste("Bar chart of", input$var_choice)) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    }
  })
  
  # Table summary
  output$var_summary <- renderTable({
    req(input$var_choice)
    var_data <- cohort_data[[input$var_choice]]
    
    if (is.numeric(var_data)) {
      # Numeric summary
      summary_stats <- summary(var_data)
      as.data.frame(t(summary_stats))
    } else {
      # Frequency table
      freq <- table(var_data, useNA = "ifany")
      as.data.frame(freq)
    }
  }, rownames = TRUE)
  
  ## PATIENT INFO TAB
  # eventReactive: fetch either ADT or ICU data from BigQuery
  patient_data <- eventReactive(input$go_btn, {
    req(input$subject_id, input$plot_type)
    pid <- input$subject_id
    
    if (input$plot_type == "ADT") {
      # Table pointers
      patients_tble        <- tbl(con_bq, "patients")
      admissions_tble      <- tbl(con_bq, "admissions")
      transfers_tble       <- tbl(con_bq, "transfers")
      diagnoses_tble       <- tbl(con_bq, "diagnoses_icd")
      d_icd_diagnoses_tble <- tbl(con_bq, "d_icd_diagnoses")
      procedures_tble      <- tbl(con_bq, "procedures_icd")
      d_icd_procedures_tble<- tbl(con_bq, "d_icd_procedures")
      labevents_tble       <- tbl(con_bq, "labevents")
      
      # patient_info
      patient_info <- patients_tble %>%
        filter(subject_id == pid) %>%
        collect()
      
      # admissions_info
      admissions_info <- admissions_tble %>%
        filter(subject_id == pid) %>%
        collect()
      
      # transfers_info
      transfers_info <- transfers_tble %>%
        filter(subject_id == pid) %>%
        collect() %>%
        mutate(
          event_type = "ADT",
          start_date = as.Date(intime),
          end_date   = as.Date(outtime),
          is_icu     = str_detect(careunit, "ICU|CCU")
        )
      
      # lab_info
      lab_info <- labevents_tble %>%
        filter(subject_id == pid) %>%
        collect() %>%
        mutate(
          event_type = "Lab",
          start_date = as.Date(charttime)
        )
      
      # procedures_info
      procedures_info <- procedures_tble %>%
        filter(subject_id == pid) %>%
        left_join(d_icd_procedures_tble, by = "icd_code") %>%
        collect() %>%
        mutate(
          event_type = "Procedure",
          start_date = as.Date(chartdate)
        )
      
      # diagnoses_info
      diagnoses_info <- diagnoses_tble %>%
        filter(subject_id == pid) %>%
        left_join(d_icd_diagnoses_tble, by = "icd_code") %>%
        select(subject_id, hadm_id, icd_code, long_title) %>%
        collect()
      
      top_diagnoses <- diagnoses_info %>%
        slice_head(n = 3) %>%
        pull(long_title)
      
      # Return a list
      list(
        type            = "ADT",
        patient_info    = patient_info,
        admissions_info = admissions_info,
        transfers_info  = transfers_info,
        lab_info        = lab_info,
        procedures_info = procedures_info,
        top_diagnoses   = top_diagnoses
      )
      
    } else {
      # ICU code
      # 1. Table pointers
      chartevents_tble <- tbl(con_bq, "chartevents")
      d_items_tble     <- tbl(con_bq, "d_items")
      icustays_tble    <- tbl(con_bq, "icustays")
      
      # 2. Join chartevents with d_items
      chartevents_joined <- chartevents_tble %>%
        left_join(d_items_tble, by = "itemid")
      
      # 3. Filter for relevant vitals
      vitals <- chartevents_joined %>%
        filter(
          subject_id == pid,
          label %in% c("Heart Rate",
                       "Non Invasive Blood Pressure systolic",
                       "Non Invasive Blood Pressure diastolic",
                       "Respiratory Rate",
                       "Temperature Fahrenheit")
        ) %>%
        collect() %>%
        mutate(charttime = ymd_hms(charttime))
      
      # 4. ICU stays
      icustays_local <- icustays_tble %>%
        filter(subject_id == pid) %>%
        collect() %>%
        mutate(
          intime  = ymd_hms(intime),
          outtime = ymd_hms(outtime)
        )
      
      # 5. Join on stay_id
      vitals_icu <- vitals %>%
        inner_join(icustays_local, by = c("subject_id", "stay_id")) %>%
        mutate(
          vital_abbr = case_when(
            label == "Heart Rate" ~ "HR",
            label == "Non Invasive Blood Pressure systolic"  ~ "NBPs",
            label == "Non Invasive Blood Pressure diastolic" ~ "NBPd",
            label == "Respiratory Rate" ~ "RR",
            label == "Temperature Fahrenheit" ~ "Temp (F)",
            TRUE ~ label
          )
        )
      
      list(
        type       = "ICU",
        vitals_icu = vitals_icu
      )
    }
  })
  
  # Plot for Patient Info (ADT or ICU)
  output$patient_plot <- renderPlot({
    data_list <- patient_data()
    req(data_list)
    
    if (data_list$type == "ADT") {
      # ADT plot
      transfers_info <- data_list$transfers_info %>%
        mutate(is_icu = as.factor(is_icu))
      
      ggplot() +
        # ADT segments
        geom_segment(
          data = transfers_info, 
          aes(x = start_date, xend = end_date,
              y = event_type, yend = event_type,
              color = careunit, linewidth = is_icu)
        ) +
        scale_linewidth_manual(values = c("FALSE" = 0.5, "TRUE" = 2)) +
        # Lab events
        geom_point(
          data = data_list$lab_info,
          aes(x = start_date, y = event_type),
          shape = 4
        ) +
        # Procedures
        geom_point(
          data = data_list$procedures_info,
          aes(x = start_date, y = event_type, shape = long_title),
          size = 3
        ) +
        labs(
          title = paste0(
            "Patient ", input$patient_id, ", ",
            data_list$patient_info$gender, ", ",
            data_list$patient_info$anchor_age, " years old, ",
            data_list$admissions_info$race
          ),
          subtitle = paste(
            "Top Diagnoses:\n", 
            paste(data_list$top_diagnoses, collapse = "\n")
          ),
          x = "Calendar Time",
          y = NULL,
          color = "Care Unit",
          shape = "Procedure",
          linewidth = "ICU/CCU"
        ) +
        theme_minimal() +
        theme(legend.position = "bottom") +
        scale_x_date(date_breaks = "2 weeks", date_labels = "%b %d")
      
    } else {
      # ICU plot
      df <- data_list$vitals_icu
      ggplot(df, aes(x = charttime, y = valuenum, color = vital_abbr)) +
        geom_line() +
        geom_point() +
        facet_grid(vital_abbr ~ stay_id, scales = "free_y") +
        scale_x_datetime(date_breaks = "12 hours", date_labels = "%b %d %H:%M") +
        labs(
          title = paste("Patient", input$patient_id, "ICU stays - Vitals"),
          x = NULL,
          y = NULL,
          color = "Vital"
        ) +
        theme_minimal() +
        theme(
          legend.position = "bottom",
          strip.text = element_text(size = 10)
        )
    }
  })
  
  # Show a table of the raw data (optional)
  output$patient_table <- renderDT({
    data_list <- patient_data()
    req(data_list)
    
    if (data_list$type == "ADT") {
      # For example, show the transfers_info data
      datatable(data_list$transfers_info)
    } else {
      # For ICU, show vitals_icu
      datatable(data_list$vitals_icu)
    }
  })
}
```

```{r}
shinyApp(ui, server)
```

