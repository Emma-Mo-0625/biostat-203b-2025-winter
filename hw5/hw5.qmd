---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 20 @ 11:59PM
author: "Emma Mo 906542365"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.

2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
#| eval: false
set.seed(203)

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )
```

3. Train and tune the models using the training set.

4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?


```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(caret)
library(tidymodels)
library(ranger)
library(tidyr)

# Load dataset
mimic_data <- readRDS("../hw4/mimiciv_shiny/mimic_icu_cohort.rds")

# Select only the features available at ICU admission
icu_data <- mimic_data |>
  arrange(subject_id, hadm_id, stay_id) |>
  select(gender, age_intime, marital_status, race, first_careunit,
         glucose, potassium, sodium, chloride, creatinine, wbc, 
         bicarbonate, hematocrit, heart_rate, temperature_fahrenheit, 
         non_invasive_blood_pressure_diastolic,
         respiratory_rate, non_invasive_blood_pressure_systolic, los_long)
```


```{r}
set.seed(203)

icu_data_sorted <- icu_data |>
  filter(!is.na(los_long)) |>  # drop rows where los_long is NA
  mutate(los_long = as.factor(los_long)) # ensure it's a factor

# Create a 50/50 split stratified by los_long
data_split <- initial_split(icu_data_sorted, 
                            strata = "los_long",
                            prop = 0.5)
data_split
```


```{r}
train_data <- training(data_split)
test_data  <- testing(data_split)
dim(train_data)
dim(test_data)
```


### Random Forest

```{r}
# Convert categorical variables to factors
rf_recipe <- recipe(los_long ~ ., data = train_data) |>
  # Convert categorical variables to factors
  step_mutate_at(c("gender", "marital_status", "race", "first_careunit"), 
                 fn = as.factor) |>
  # Impute missing numeric predictors with the mean
  step_impute_mean(all_numeric_predictors()) |>
  # Impute missing categorical predictors with the mode
  step_impute_mode(all_nominal_predictors()) |>
  # Remove predictors with zero variance
  step_zv(all_predictors()) |>
  print()
```

```{r}
rf_spec <- rand_forest(
  mtry  = tune(),   # number of variables randomly sampled at each split
  trees = tune(),   # number of trees in the ensemble
  min_n = tune()    # minimum number of observations in terminal nodes
) |>
  set_engine("ranger", importance = "impurity") |>
  set_mode("classification")
rf_spec
```

```{r}
# Create the workflow combining the recipe and the model
rf_workflow <- workflow() |>
  add_recipe(rf_recipe) |>
  add_model(rf_spec)
rf_workflow
```

```{r}
coarse_rf_grid <- grid_regular(
  mtry(range = c(3, 3)),
  trees(range = c(110, 130)),
  min_n(range = c(4, 4)),
  levels = 3
)

```

```{r}
# Create 5-fold cross-validation, stratified by los_long
set.seed(203)
icu_folds <- vfold_cv(train_data, v = 5, strata = los_long)
icu_folds
```

```{r}
rf_tune_results <- tune_grid(
  rf_workflow,
  resamples = icu_folds,
  grid = coarse_rf_grid,
  metrics = metric_set(roc_auc, accuracy),
  control = control_grid(
    save_pred = TRUE,
    save_workflow = TRUE
  )
)
rf_tune_results
```


```{r}
# show top models
rf_tune_results |> show_best(metric = "roc_auc")
```

```{r}
# select the best model
best_rf_params <- select_best(rf_tune_results, metric = "roc_auc")
best_rf_params
```

```{r}
# Final workflow
final_rf_workflow <- finalize_workflow(rf_workflow, best_rf_params)
final_rf_workflow
```

```{r}
# Fit the final model on the training data
final_rf_fit <- final_rf_workflow |> last_fit(data_split)
rf_metrics <- final_rf_fit |> 
  collect_metrics() |>
  filter(.metric %in% c("accuracy", "roc_auc")) |>
  select(.metric, .estimate) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(model = "Random Forest")
rf_metrics
```


### Logit

```{r}
library(tidymodels)
library(GGally)
library(gtsummary)
library(tidyverse)

log_reg_recipe <- recipe(los_long ~ ., data = train_data) |>
  # Converts to factors
  step_mutate_at(c("gender", "marital_status", "race", "first_careunit"), 
                 fn = as.factor) |>
  step_impute_mean(all_numeric_predictors()) |>
  step_impute_mode(all_nominal_predictors()) |>
  # zero-variance filter
  step_zv(all_numeric_predictors()) |>
  # create traditional dummy variables (necessary for svm)
  step_dummy(all_nominal_predictors()) |>
  # center and scale numeric data
  step_normalize(all_numeric_predictors()) |>
  print()
```

```{r}
# Define a logistic regression model with elastic net regularization.
# We tune 'penalty' and 'mixture'.
log_reg_spec <- logistic_reg(
  penalty = tune(),
  mixture = tune()
) |>
  set_engine("glmnet") |>
  set_mode("classification")
log_reg_spec
```

```{r}
# Build the workflow by combining the recipe and the model
log_reg_workflow <- workflow() |>
  add_recipe(log_reg_recipe) |>
  add_model(log_reg_spec)
log_reg_workflow
```

```{r}
# Tuning
logit_grid <- grid_regular(
  penalty(),  
  mixture()   
)
logit_grid
```


```{r}
# Create 5-fold cross-validation, stratified by los_long
set.seed(203)
icu_folds <- vfold_cv(train_data, v = 5, strata = los_long)
```

```{r}
# Tune the SVM model using the coarse grid
set.seed(203)
log_reg_tune <- tune_grid(
  log_reg_workflow,
  resamples = icu_folds,
  grid = logit_grid,
  metrics = metric_set(roc_auc, accuracy),
  control = control_grid(
    save_pred = TRUE,
    save_workflow = TRUE
  )
)
log_reg_tune
```


```{r}
log_reg_tune |> show_best(metric = "roc_auc")
```

```{r}
best_logit <- log_reg_tune |>
  select_best(metric = "roc_auc")
best_logit
```

```{r}
final_log_reg_workflow <- log_reg_workflow |>
  finalize_workflow(best_logit)
final_log_reg_workflow
```

```{r}
# Fit the whole training set, then predict the test cases
final_log_reg_fit <- final_log_reg_workflow |> last_fit(data_split)

# Collect and view performance metrics on the test set
logit_metrics <- final_log_reg_fit |> 
  collect_metrics() |>
  filter(.metric %in% c("accuracy", "roc_auc")) |>
  select(.metric, .estimate) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(model = "Logistic Regression")
logit_metrics
```

### Boosting (XGboost)

```{r}
library(xgboost)

xgb_recipe <- recipe(los_long ~ ., data = train_data) |>
  step_mutate_at(c("gender", "marital_status", "race", "first_careunit"), 
                 fn = as.factor) |>
  step_impute_mean(all_numeric_predictors()) |>
  step_impute_mode(all_nominal_predictors()) |>
  step_zv(all_predictors()) |>
  step_dummy(all_nominal_predictors()) |> 
  print()
```

```{r}
# tune key hyperparameters:
#   - trees: number of trees (boosting rounds)
#   - learn_rate: learning rate (shrinkage)
#   - tree_depth: maximum depth of trees
xgb_spec <- boost_tree(
  trees = tune(), 
  learn_rate = tune(),
  tree_depth = tune()
) |>
  set_engine("xgboost") |>
  set_mode("classification")
xgb_spec
```

```{r}
xgb_workflow <- workflow() |>
  add_recipe(xgb_recipe) |>
  add_model(xgb_spec)
xgb_workflow
```

```{r}
narrow_xgb_grid <- grid_regular(
  trees(range = c(110, 130)),        
  learn_rate(range = c(0.05, 0.3)),    
  tree_depth(range = c(3, 3)),         
  levels = 3
)
narrow_xgb_grid
```

```{r}
# Create 5-fold cross-validation, stratified by los_long
set.seed(203)
icu_folds <- vfold_cv(train_data, v = 5, strata = los_long)
```

```{r}
set.seed(203)
xgb_tune_results <- tune_grid(
  xgb_workflow,
  resamples = icu_folds,
  grid = narrow_xgb_grid,
  metrics = metric_set(roc_auc, accuracy),
  control = control_grid(
    save_pred = TRUE,
    save_workflow = TRUE
  )
)
xgb_tune_results
```

```{r}
# Show the top 5 models
xgb_tune_results |> show_best(metric = "roc_auc")

# select the best one
best_xgb_params <- xgb_tune_results |>
  select_best(metric = "roc_auc")
best_xgb_params
```

```{r}
final_xgb_workflow <- xgb_workflow |>
  finalize_workflow(best_xgb_params)
final_xgb_workflow
```

```{r}
final_xgb_fit <- final_xgb_workflow |>
  last_fit(data_split)
final_xgb_fit
```

```{r}
xgb_metrics <- final_xgb_fit |> 
  collect_metrics() |> 
  filter(.metric %in% c("accuracy", "roc_auc")) |>
  select(.metric, .estimate) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(model = "XGBoost")
xgb_metrics
```


### Stacking

```{r}
library(stacks)
library(tidymodels)
library(dplyr)
library(yardstick)
library(pROC)

model_stack <- stacks() |>
  add_candidates(rf_tune_results, top_n = 3) |>
  add_candidates(log_reg_tune, top_n = 3) |>
  add_candidates(xgb_tune_results, top_n = 3) |>
  # Blend predictions from all base learners
  blend_predictions() |>
  # fit the candidates with nonzero stacking coefficients
  fit_members()
model_stack
```

```{r}
test_results <- test_data |>
  bind_cols(predict(model_stack, new_data = test_data, type = "prob"))
```

```{r}
stack_preds <- predict(model_stack, new_data = test_data, type = "prob")
stack_class_preds <- predict(model_stack, new_data = test_data, type = "class")
results <- test_data |>
  bind_cols(stack_preds) |>
  bind_cols(stack_class_preds)
```

```{r}
library(dplyr)
library(pROC)
library(yardstick)

results <- results |> rename(.pred_1 = .pred_TRUE)

# Accuracy
stack_acc_value <- results |>
  accuracy(truth = los_long, estimate = .pred_class)

# ROC AUC
stack_roc_obj <- roc(
  response = results$los_long,
  predictor = results$.pred_1,  # or .pred_TRUE, after renaming
  levels = rev(levels(results$los_long))
)
auc_value <- auc(stack_roc_obj)

# Combine into a df
stack_metrics_df <- data.frame(
  metric = c("stack_accuracy", "stack_auc"),
  value = c(stack_acc_value$.estimate, auc_value)
)

stack_metrics_df
```

```{r}
stack_metrics_wide <- stack_metrics_df |>
  pivot_wider(names_from = metric, values_from = value) |>
  rename(accuracy = stack_accuracy, roc_auc = stack_auc) |>
  mutate(model = "Stacking")

stack_metrics_wide
```

### Final comparison

Compare the accuracy and AUC

```{r}
model_comparison <- bind_rows(
  rf_metrics,
  logit_metrics,
  xgb_metrics,
  stack_metrics_wide
)

model_comparison
```

- Stacking has the highest AUC and accuracy, meaning that the ensemble improves performance.
- Random forest and XGBoost have moderate AUC and accuracy
- Logistic regression has the lowest accuracy and AUC, though the difference is slight.


Find the most important features of each model

```{r}
## Random forest
library(tidymodels)
library(vip)

# Extract the underlying parsnip model, then plot VIP
final_rf_fit |>
  extract_fit_parsnip() |>
  vip::vip(num_features = 10)
```

- Random forest
  - From the Variable Importance plot, the top 3 contributors are: 
    - `non_invasive_blood_pressure_systolic`, `heart_rate`, and `hematocrit`
  - They most frequently help differentiate between longer vs shorter stays
  - These 3 variables contribute slightly more than the rest of the top 10 variables.


```{r}
## XGboost
library(xgboost)
library(tidymodels)
library(vip)

# Extract the underlying xgboost model
xgb_model <- final_xgb_fit |>
  extract_fit_parsnip()
xgb_model <- xgb_model$fit

# Use xgb.importance() + xgb.plot.importance()
importance <- xgb.importance(model = xgb_model)
xgb.plot.importance(importance)

```

- XGboost
  - The most important feature is `temperature_fahrenheit`.
  - It contributes dramatically more than the second variable (`non_invasive_blood_pressure_systolic`).


```{r}
## Logit
library(broom)

log_reg_model <- final_log_reg_fit |>
  extract_fit_parsnip()

coefs <- tidy(log_reg_model) |>
  filter(term != "(Intercept)") |>
  mutate(abs_estimate = abs(estimate)) |>
  arrange(desc(abs_estimate))

head(coefs, 10)  # top 10 largest absolute coefficients

```

- Logistic regression
  - The top 3 contributors:
    - `first_careunit` (negative), `heart_rate` (positive), and `respiratory_rate` (positive)
  
- Interpretability
  - Stacking provides improvement in AUC and accuracy
  - Logistic Regression is good at providing coefficient signs and magnitudes of predictors
  - Random Forest and XGBoost are more complex but provide variable importance
  - The most critical predictors across models: 
    - `heart_rate`, `respiratory_rate` and `non_invasive_blood_pressure_systolic`.

