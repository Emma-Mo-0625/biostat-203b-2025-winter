---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 21 @ 11:59PM"
author: "Emma Mo and 906542365"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display your machine memory.
```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png)
Do a similar visualization for the patient with `subject_id` 10063848 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

```{r}
source_dir <- "../hw2/labevents.parquet"
target_dir <- "labevents_pq"

if (file.exists(target_dir) || dir.exists(target_dir)) {
  unlink(target_dir, recursive = TRUE)
}

file.symlink(from = source_dir, to = target_dir)

file.exists(target_dir)
```

```{r}
parquet_dir <- "labevents_pq/"
labevents <- open_dataset(parquet_dir)
```

```{r}
hosp_dir <- "~/mimic/hosp"

patients       <- read_csv(file.path(hosp_dir, "patients.csv.gz"))
admissions     <- read_csv(file.path(hosp_dir, "admissions.csv.gz"))
transfers      <- read_csv(file.path(hosp_dir, "transfers.csv.gz"))
procedures     <- read_csv(file.path(hosp_dir, "procedures_icd.csv.gz"))
diagnoses      <- read_csv(file.path(hosp_dir, "diagnoses_icd.csv.gz"))
d_icd_procedures <- read_csv(file.path(hosp_dir, "d_icd_procedures.csv.gz"))
d_icd_diagnoses  <- read_csv(file.path(hosp_dir, "d_icd_diagnoses.csv.gz"))

```

```{r}
subject_id <- 10063848

# Filter patient info
patient_info <- patients %>%
  filter(subject_id == !!subject_id)

# Filter admissions info
admissions_info <- admissions %>%
  filter(subject_id == !!subject_id)

# Process transfers (ADT) info, converting to Date only
transfers_info <- transfers %>% 
  filter(subject_id == !!subject_id) %>%
  mutate(
    event_type = "ADT",
    start_date = as.Date(intime),
    end_date   = as.Date(outtime),
    is_icu     = str_detect(careunit, "ICU|CCU")
  )

# Process lab events, converting charttime to Date
lab_info <- labevents %>% 
  filter(subject_id == !!subject_id) %>% 
  collect() %>%
  mutate(
    event_type = "Lab",
    start_date = as.Date(charttime)
  )

# Process procedures, converting chartdate to Date
procedures_info <- procedures %>%
  filter(subject_id == !!subject_id) %>%
  left_join(d_icd_procedures, by = "icd_code") %>%
  mutate(
    event_type = "Procedure",
    start_date = as.Date(chartdate)
  )

# Get top 3 diagnoses
diagnoses_info <- diagnoses %>%
  filter(subject_id == !!subject_id) %>%
  left_join(d_icd_diagnoses, by = "icd_code") %>%
  select(subject_id, hadm_id, icd_code, long_title)

top_diagnoses <- diagnoses_info %>%
  slice_head(n = 3) %>%
  pull(long_title)
```

```{r}
# Convert is_icu to a factor (for proper mapping)
transfers_info <- transfers_info %>% 
  mutate(is_icu = as.factor(is_icu))

# Create the plot using ggplot2 with Date-based x-axis
ggplot() +
  # ADT segments
  geom_segment(
    data = transfers_info, 
    aes(x = start_date, xend = end_date,
        y = event_type, yend = event_type,
        color = careunit, linewidth = is_icu)
  ) +
  scale_linewidth_manual(values = c("FALSE" = 0.5, "TRUE" = 2)) +
  
  # Lab events as crosses
  geom_point(
    data = lab_info,
    aes(x = start_date, y = event_type),
    shape = 4  # cross shape
  ) +
  
  # Procedures as points with different shapes
  geom_point(
    data = procedures_info,
    aes(x = start_date, y = event_type, shape = long_title),
    size = 3
  ) +
  
  labs(
    title = paste0(
      "Patient ", subject_id, ", ", 
      patient_info$gender, ", ", 
      patient_info$anchor_age, " years old ",
      admissions_info$race
    ),
    subtitle = paste("Top Diagnoses:\n", paste(top_diagnoses, collapse = "\n")),
    x = "Calendar Time",
    y = NULL,
    color = "Care Unit",
    shape = "Procedure",
    linewidth = "ICU/CCU"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  scale_x_date(date_breaks = "2 weeks", date_labels = "%b %d")
```


### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10063848`.

```{r}
csv_file <- "~/mimic/icu/chartevents.csv.gz"
parquet_file <- "~/mimic/icu/csv_file"

parquet_data <- open_dataset(parquet_file, format = "parquet")

chartevents_data <- parquet_data %>%
  filter(subject_id %in% c(10063848))
chartevents <- collect(chartevents_data)
```


```{r}
d_items     <- read_csv("~/mimic/icu/d_items.csv.gz")
```


```{r}
chartevents_joined <- chartevents %>%
  left_join(d_items, by = "itemid")

subject_of_interest <- 10063848

vitals <- chartevents_joined %>%
  filter(
    subject_id == subject_of_interest,
    label %in% c("Heart Rate",
                 "Non Invasive Blood Pressure systolic",
                 "Non Invasive Blood Pressure diastolic",
                 "Respiratory Rate",
                 "Temperature Fahrenheit")
  ) %>%
  mutate(
    charttime = ymd_hms(charttime)  # parse as POSIXct
  )
```

```{r}
icustays <- read_csv("~/mimic/icu/icustays.csv.gz") %>%
  filter(subject_id == subject_of_interest) %>%
  mutate(
    intime  = ymd_hms(intime),
    outtime = ymd_hms(outtime)
  )
```

```{r}
vitals_icu <- vitals %>%
  inner_join(icustays, by = c("subject_id", "stay_id")) 
```

```{r}
vitals_icu <- vitals_icu %>%
  mutate(
    vital_abbr = case_when(
      label == "Heart Rate" ~ "HR",
      label == "Non Invasive Blood Pressure systolic"  ~ "NBPs",
      label == "Non Invasive Blood Pressure diastolic" ~ "NBPd",
      label == "Respiratory Rate" ~ "RR",
      label == "Temperature Fahrenheit" ~ "Temperature Fahrenheit",
      TRUE ~ label
    )
  )
```


```{r}
ggplot(vitals_icu, aes(x = charttime, y = valuenum, color = vital_abbr)) +
  geom_line() +
  geom_point() +
  facet_grid(vital_abbr ~ stay_id, scales = "free_y") +
  scale_x_datetime(date_breaks = "12 hours", date_labels = "%b %d %H:%M") +
  labs(
    title = paste("Patient", subject_of_interest, "ICU stays - Vitals"),
    x = NULL,
    y = NULL,  # or "Value"
    color = "Vital"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    strip.text = element_text(size = 10)
  )

```


## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`. 

```{r}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz")
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs. 

```{r}
num_unique_subjects <- icustays_tble %>%
  summarize(n_unique_subjects = n_distinct(subject_id)) %>%
  pull(n_unique_subjects)
num_unique_subjects
```

There are 65366 unique `subject_id`.

```{r}
subject_stays <- icustays_tble %>%
  group_by(subject_id) %>%
  summarize(n_stays = n(), .groups = "drop")
subject_stays

sum(subject_stays$n_stays > 1)
```

Yes, a `subject_id` can have multiple ICU stays.

```{r}
ggplot(subject_stays, aes(x = n_stays)) +
  geom_bar() +
  scale_x_continuous(breaks = 1:max(subject_stays$n_stays)) +
  labs(
    title = "Distribution of ICU stays per subject_id",
    x = "Number of ICU stays",
    y = "Count of subjects"
  ) +
  theme_minimal()
```


## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

```{r}
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz")
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

- number of admissions per patient  
- admission hour (anything unusual?)  
- admission minute (anything unusual?)  
- length of hospital stay (from admission to discharge) (anything unusual?)  

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting), 

```{r}
library(tidyverse)
library(lubridate)  # For working with dates/times

adm_per_patient <- admissions_tble %>%
  group_by(subject_id) %>%
  summarize(n_admissions = n(), .groups = "drop")

ggplot(adm_per_patient, aes(x = n_admissions)) +
  geom_bar(fill = "steelblue") +
  labs(
    title = "Distribution of Number of Admissions per Patient",
    x = "Number of Admissions",
    y = "Count of Patients"
  ) +
  theme_minimal()
```

- Many patients typically have only 1 admission (common in hospital databases).
- A long, thin tail extending out to higher numbers of admissions, meaning fewer patients have many admissions.

```{r}
admissions_tble <- admissions_tble %>%
  mutate(admission_hour = hour(admittime))

ggplot(admissions_tble, aes(x = admission_hour)) +
  geom_bar(fill = "tomato") +
  scale_x_continuous(breaks = 0:23) +
  labs(
    title = "Distribution of Admission Hour",
    x = "Hour of Day (0-23)",
    y = "Count of Admissions"
  ) +
  theme_minimal()

```

- A very high bar at hour = 0 (midnight).
- Fewer admissions during the early morning hours (1–9 AM), with another spike at 7 AM.
- A gradual rise and plateau from 10 AM through evening hours.

```{r}
# 1. Extract the minute of admission
admissions_tble <- admissions_tble %>%
  mutate(admission_minute = minute(admittime))

# 2. Plot the distribution of admission_minute
ggplot(admissions_tble, aes(x = admission_minute)) +
  geom_bar(fill = "forestgreen") +
  scale_x_continuous(breaks = seq(0, 59, by = 5)) +
  labs(
    title = "Distribution of Admission Minute",
    x = "Minute (0-59)",
    y = "Count of Admissions"
  ) +
  theme_minimal()
```

Every 15 minutes there is a spike. This is likely due to rounding of the admission time to the nearest 15 minutes.

```{r}
admissions_tble <- admissions_tble %>%
  mutate(
    length_of_stay_days = as.numeric(difftime(dischtime, admittime, units = "days"))
  )

ggplot(admissions_tble, aes(x = length_of_stay_days)) +
  geom_histogram(bins = 50, fill = "purple", color = "white") +
  labs(
    title = "Distribution of Length of Hospital Stay",
    x = "Length of Stay (days)",
    y = "Count of Admissions"
  ) +
  theme_minimal()

```

- A large number of very short stays (near 0–2 days).
- The distribution tapers off quickly but extends to very long stays (hundreds of days).
- A classic right-skewed distribution: many short stays, fewer very long ones.

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

```{r}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz")
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

```{r}
library(tidyverse)

gender_count <- patients_tble %>%
  group_by(gender) %>%
  summarize(count = n(), .groups = "drop")

ggplot(gender_count, aes(x = gender, y = count, fill = gender)) +
  geom_bar(stat = "identity") +
  labs(
    title = "Distribution of Gender",
    x = "Gender",
    y = "Count"
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```

Female is slightly more than male.

```{r}
ggplot(patients_tble, aes(x = anchor_age)) +
  geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
  labs(
    title = "Distribution of Anchor Age",
    x = "Anchor Age",
    y = "Count"
  ) +
  theme_minimal()
```

- The majority of patients cluster around young adult ages (e.g., 20s–30s).
- There is also a substantial number of middle-aged and older adults.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements. 
```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)


Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

```{r}
library(arrow)

# Read the gzipped CSV file
labitems <- read_csv_arrow("~/mimic/hosp/d_labitems.csv.gz")

# Write the data to a Parquet file
write_parquet(labitems, "labitems_tble.parquet")

# Optionally, open the Parquet dataset as a table
labitems_tble <- open_dataset("labitems_tble.parquet", format = "parquet")
```

```{r}
itemid_label <- c(
  "50912" = "creatinine",
  "50971" = "potassium",
  "50983" = "sodium",
  "50902" = "chloride",
  "50882" = "bicarbonate",
  "51221" = "hematocrit",
  "51301" = "white_blood_cells",
  "50931" = "glucose"
)
```


```{r}
labevents_tble <- open_dataset("labevents_pq", format = "parquet") |>
  to_duckdb() |>
  select(subject_id, itemid, storetime, valuenum) |>
  filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) |>
  left_join(
    select(icustays_tble, subject_id, stay_id, intime),
    by = c("subject_id"),
    copy = TRUE
  ) |>
  filter(storetime < intime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_max(storetime, n = 1) |>
  select(-storetime, -intime) |>
  ungroup() |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  rename_at(
    vars(names(itemid_label)),    
    ~ itemid_label[.]
    ) |>
  show_query() |>
  collect() |>
  arrange(subject_id, stay_id) |>
  relocate(subject_id, stay_id)

print(labevents_tble)
```


## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement. 

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

```{r}
library(arrow)

chartevents_csv <- "~/mimic/icu/chartevents.csv.gz"
# A folder (not a single file) that will contain Parquet data
chartevents_parquet <- "chartevents_pq"
dataset <- open_dataset(chartevents_csv, format = "csv")
write_dataset(dataset, chartevents_parquet, format = "parquet")
```


```{r}
itemid_label <- c(
  "220045" = "heart_rate",
  "220179" = "systolic non-invasive blood pressure",
  "220180" = "diastolic non-invasive blood pressure",
  "223761" = "temperature in Fahrenheit",
  "220210" = "respiratory rate"
)
```


```{r}
chartevents_tble <- open_dataset("chartevents_pq", format = "parquet") |>
  to_duckdb() |>
  select(subject_id, itemid, storetime, valuenum) |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>
  left_join(
    select(icustays_tble, subject_id, stay_id, intime, outtime),
    by = "subject_id",
    copy = TRUE
  ) |>
  filter(storetime >= intime, storetime <= outtime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_min(storetime, n = 1, with_ties = FALSE) |>
  summarise(valuenum = mean(as.numeric(valuenum), na.rm = TRUE), 
            .groups = "drop") |>
  ungroup() |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  rename_at(
    vars(names(itemid_label)),
    ~ itemid_label[.]
  ) |>
  show_query() |>
  collect() |>
  arrange(subject_id, stay_id)

print(chartevents_tble)
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` >= 18) and columns contain at least following variables

- all variables in `icustays_tble`  
- all variables in `admissions_tble`  
- all variables in `patients_tble`
- the last lab measurements before the ICU stay in `labevents_tble` 
- the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

```{r}
mimic_icu_cohort <- icustays_tble %>%
  # 1) Join ICU stays with admissions
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) %>%
  
  # 2) Join with patients
  left_join(patients_tble, by = "subject_id") %>%
  
  # 3) Filter to adult ICU stays
  filter(anchor_age >= 18) %>%
  
  # 4) Join the last lab measurements before ICU (one row per ICU stay)
  left_join(labevents_tble, by = c("subject_id", "stay_id")) %>%
  
  # 5) Join the first vitals during ICU (also one row per ICU stay)
  left_join(chartevents_tble, by = c("subject_id", "stay_id"))

mimic_icu_cohort

```


## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

- Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

```{r}
library(dplyr)
library(ggplot2)

# By Race
mimic_icu_cohort %>%
  group_by(race) %>%
  summarize(
    n_stays = n(),
    median_los = median(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)
  ) %>%
  arrange(desc(median_los)) %>%
  print(n = Inf)

# By Insurance
mimic_icu_cohort %>%
  group_by(insurance) %>%
  summarize(
    n_stays = n(),
    median_los = median(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)
  ) %>%
  arrange(desc(median_los))

# By Marital Status
mimic_icu_cohort %>%
  group_by(marital_status) %>%
  summarize(
    n_stays = n(),
    mean_los = mean(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE)
  )

# By Gender
mimic_icu_cohort %>%
  group_by(gender) %>%
  summarize(
    n_stays = n(),
    median_los = median(los, na.rm = TRUE)
  )
```

```{r}
# by age
mimic_icu_cohort %>%
  summarize(
    correlation = cor(anchor_age, los, use = "complete.obs", method = "spearman")
  )
```

```{r}
# Boxplots of LOS by categorical demographic variable
ggplot(mimic_icu_cohort, aes(x = race, y = los)) +
  geom_boxplot() +
  coord_flip() +  # Flip for easier reading if many race categories
  labs(title = "LOS by Race",
       x = "Race",
       y = "ICU Length of Stay (days)")

ggplot(mimic_icu_cohort, aes(x = insurance, y = los)) +
  geom_boxplot() +
  coord_flip() +
  labs(title = "LOS by Insurance",
       x = "Insurance Type",
       y = "ICU Length of Stay (days)")
```

```{r}
# Scatterplot of Age vs LOS
ggplot(mimic_icu_cohort, aes(x = anchor_age, y = los)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "LOS vs Age",
       x = "Age at ICU Admission",
       y = "ICU Length of Stay (days)")

```


- Length of ICU stay `los` vs the last available lab measurements before ICU stay

```{r}
# correlation of each lab vs LOS
labs_of_interest <- c("creatinine", "potassium", "sodium", 
                      "chloride", "bicarbonate", "hematocrit", 
                      "white_blood_cells", "glucose")

mimic_icu_cohort %>%
  select(los, all_of(labs_of_interest)) %>%
  summarize(across(all_of(labs_of_interest), 
                   ~ cor(.x, los, use = "complete.obs", method = "spearman")))
```


- Length of ICU stay `los` vs the first vital measurements within the ICU stay

```{r}
vitals_of_interest <- c("heart_rate", 
                        "systolic non-invasive blood pressure",
                        "diastolic non-invasive blood pressure",
                        "temperature in Fahrenheit",
                        "respiratory rate")

mimic_icu_cohort %>%
  select(los, all_of(vitals_of_interest)) %>%
  summarize(across(all_of(vitals_of_interest), 
                   ~ cor(.x, los, use = "complete.obs", method = "spearman")))
```

```{r}
mimic_icu_cohort %>%
  select(los, all_of(vitals_of_interest)) %>%
  pivot_longer(
    cols = all_of(vitals_of_interest),
    names_to = "vital",
    values_to = "value"
  ) %>%
  ggplot(aes(x = value, y = los)) +
  geom_point(alpha = 0.3) +
  facet_wrap(~ vital, scales = "free_x") +  # Each vital on its own panel
  labs(
    title = "LOS vs First Vitals in ICU",
    x = "Vital measurement",
    y = "ICU Length of Stay (days)"
  ) +
  theme_minimal()

```


- Length of ICU stay `los` vs first ICU unit

```{r}
mimic_icu_cohort %>%
  group_by(first_careunit) %>%
  summarize(
    n_stays = n(),
    median_los = median(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)
  ) %>%
  arrange(desc(median_los))

```

```{r}
ggplot(mimic_icu_cohort, aes(x = first_careunit, y = los)) +
  geom_boxplot() +
  coord_flip() +
  labs(title = "LOS by First ICU Unit",
       x = "First ICU Unit",
       y = "ICU Length of Stay (days)")
```

